definitions:
  model.CreateAccountModel:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  model.CreateBookModel:
    properties:
      desc:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  model.CreateTodoModel:
    properties:
      completed:
        type: integer
      title:
        type: string
    type: object
  model.InsertBooklistInfo:
    properties:
      book_id:
        type: string
      list_id:
        type: string
    required:
    - book_id
    - list_id
    type: object
  model.LoginInfo:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  service.CreateOrderByListInfo:
    properties:
      list_id:
        type: string
      orders:
        items:
          $ref: '#/definitions/service.OrderDetail'
        type: array
    type: object
  service.OrderDetail:
    properties:
      book_id:
        type: string
      end_date:
        type: string
    required:
    - book_id
    - end_date
    type: object
info:
  contact: {}
paths:
  /api/v1/account:
    get:
      responses:
        "200":
          description: '{"data":[{title:title1,complete:1},{title:title2,complete:0}]}'
          schema:
            type: string
      summary: get all account record
    post:
      consumes:
      - application/json
      parameters:
      - description: account
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/model.CreateAccountModel'
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: add account record
  /api/v1/account/{email}:
    get:
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: '{"data":[{email:example@.xxx.com,complete:1}]}'
          schema:
            type: string
      summary: get account record
  /api/v1/book:
    get:
      responses:
        "200":
          description: '{"data":[{title:title1,id:0},{title:title2,id:1}]}'
          schema:
            type: string
      summary: get all book record
    post:
      consumes:
      - application/json
      parameters:
      - description: book
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/model.CreateBookModel'
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: add book record
  /api/v1/book/{id}:
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{"data":[{title:title,complete:1}]}'
          schema:
            type: string
      summary: get book record
  /api/v1/booklist/{list_id}/book/{book_id}:
    delete:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: book_id
        in: query
        name: book_id
        required: true
        type: string
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: delete booklist record
    post:
      consumes:
      - application/json
      parameters:
      - description: booklist
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/model.InsertBooklistInfo'
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: create booklist record
  /api/v1/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: login
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/model.LoginInfo'
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: login
  /api/v1/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: book-list
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/service.CreateOrderByListInfo'
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: add order record
  /api/v1/order/{id}:
    patch:
      parameters:
      - description: order_id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: return order
  /api/v1/test/not-use-tag:
    get:
      responses: {}
      summary: check what happen if not use json tag
  /api/v1/todo:
    get:
      responses:
        "200":
          description: '{"data":[{title:title1,complete:1},{title:title2,complete:0}]}'
          schema:
            type: string
      summary: get all todo record
    post:
      consumes:
      - application/json
      parameters:
      - description: todo
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/model.CreateTodoModel'
      responses:
        "200":
          description: '{"msg":"ok"}'
          schema:
            type: string
      summary: add todo record
  /api/v1/todo/{title}:
    get:
      parameters:
      - description: title
        in: path
        name: title
        required: true
        type: string
      responses:
        "200":
          description: '{"data":[{title:title,complete:1}]}'
          schema:
            type: string
      summary: get todo record
swagger: "2.0"
